// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ZkId struct{ capnp.Struct }

// ZkId_TypeID is the unique identifier for the type ZkId.
const ZkId_TypeID = 0xfaadb66890d8d665

func NewZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func NewRootZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func ReadRootZkId(msg *capnp.Message) (ZkId, error) {
	root, err := msg.RootPtr()
	return ZkId{root.Struct()}, err
}

func (s ZkId) String() string {
	str, _ := text.Marshal(0xfaadb66890d8d665, s.Struct)
	return str
}

func (s ZkId) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZkId) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZkId) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZkId) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZkId) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZkId) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZkId) Addrs() (Addr_List, error) {
	p, err := s.Struct.Ptr(1)
	return Addr_List{List: p.List()}, err
}

func (s ZkId) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZkId) SetAddrs(v Addr_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s ZkId) NewAddrs(n int32) (Addr_List, error) {
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ZkId_List is a list of ZkId.
type ZkId_List struct{ capnp.List }

// NewZkId creates a new list of ZkId.
func NewZkId_List(s *capnp.Segment, sz int32) (ZkId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ZkId_List{l}, err
}

func (s ZkId_List) At(i int) ZkId { return ZkId{s.List.Struct(i)} }

func (s ZkId_List) Set(i int, v ZkId) error { return s.List.SetStruct(i, v.Struct) }

func (s ZkId_List) String() string {
	str, _ := text.MarshalList(0xfaadb66890d8d665, s.List)
	return str
}

// ZkId_Promise is a wrapper for a ZkId promised by a client call.
type ZkId_Promise struct{ *capnp.Pipeline }

func (p ZkId_Promise) Struct() (ZkId, error) {
	s, err := p.Pipeline.Struct()
	return ZkId{s}, err
}

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0x8982abce7c93c140

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.RootPtr()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0x8982abce7c93c140, s.Struct)
	return str
}

func (s Addr) Type() uint8 {
	return s.Struct.Uint8(0)
}

func (s Addr) SetType(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Addr) Addr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Addr) HasAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Addr) SetAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Addr) Port() uint16 {
	return s.Struct.Uint16(2)
}

func (s Addr) SetPort(v uint16) {
	s.Struct.SetUint16(2, v)
}

// Addr_List is a list of Addr.
type Addr_List struct{ capnp.List }

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Addr_List{l}, err
}

func (s Addr_List) At(i int) Addr { return Addr{s.List.Struct(i)} }

func (s Addr_List) Set(i int, v Addr) error { return s.List.SetStruct(i, v.Struct) }

func (s Addr_List) String() string {
	str, _ := text.MarshalList(0x8982abce7c93c140, s.List)
	return str
}

// Addr_Promise is a wrapper for a Addr promised by a client call.
type Addr_Promise struct{ *capnp.Pipeline }

func (p Addr_Promise) Struct() (Addr, error) {
	s, err := p.Pipeline.Struct()
	return Addr{s}, err
}

const schema_c4f0db62ff503b7d = "x\xdal\xd0\xb1K\xc3@\x14\xc7\xf1\xdf\xef]\x93P" +
	"LMC\x0b\x8aKwA\xc1\x8e\xbaDP\xb0\xa0\x90" +
	"\x03'\xb7\xe8\x15\x0c\x05\x0dI\x17E\x97l\x1d\x04\xc1" +
	"?C\xa5\x9b\xbb\xe0\xec(\x82\xff\x84\x0e..\x91S" +
	"AZ:\xdd\xf1\xe5\xc1\xe7\xf1\x9aw\x91\xac9\x0b\x02" +
	"\xe8E\xc7\xad\xa2\xc7\x9b\x8b\xe7\xdbr\x04=GV\x97" +
	"\x1bqu\xf8\xf6\xfe\x04\x87\x1e\x10~\x94\xe1\xe7\xcf;" +
	"\x06\xab\xfe\xcb\xeb\xf5\xf1\xc3\xfd\xd7\xf4\xa4x@k\xc4" +
	"\xb2u\xc5\xdf\xdf\x18+\xd5\xf9 5\xabGI\xc6\x93" +
	"l}\xd3\x98\x1c1\xa9}U\x03j\x04\xc2\xede@" +
	"G\x8azWH\xb6i[\xcf\xb6-E\x1d\x0bCa" +
	"\x9b\x02\x84{6\xee(\xea}a0<\xcb\xfat!" +
	"t\xc1 1&g\x03\xc2\x06\x18d\xa7\xf9\x90\x1e\x84" +
	"\x1e8a\x1f\x0czf\xda\xee\xce\xb0\x97f\xd9\xdd?" +
	"\xdb\x08;ia\x92\x82u\x08\xeb\xa0J\x0d}\x08}" +
	"\xb0c\xf7(8\x0f\xc6\x8al\xfe\xdf\x13\xb4\xf1;\x00" +
	"\x00\xff\xff[%L\xea"

func init() {
	schemas.Register(schema_c4f0db62ff503b7d,
		0x8982abce7c93c140,
		0xfaadb66890d8d665)
}
