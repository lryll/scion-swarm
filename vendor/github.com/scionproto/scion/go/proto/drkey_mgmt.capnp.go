// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DRKeyReq struct{ capnp.Struct }
type DRKeyReq_flags DRKeyReq

// DRKeyReq_TypeID is the unique identifier for the type DRKeyReq.
const DRKeyReq_TypeID = 0x9f50d21c9d4ce7ef

func NewDRKeyReq(s *capnp.Segment) (DRKeyReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DRKeyReq{st}, err
}

func NewRootDRKeyReq(s *capnp.Segment) (DRKeyReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DRKeyReq{st}, err
}

func ReadRootDRKeyReq(msg *capnp.Message) (DRKeyReq, error) {
	root, err := msg.RootPtr()
	return DRKeyReq{root.Struct()}, err
}

func (s DRKeyReq) String() string {
	str, _ := text.Marshal(0x9f50d21c9d4ce7ef, s.Struct)
	return str
}

func (s DRKeyReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s DRKeyReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s DRKeyReq) Timestamp() uint32 {
	return s.Struct.Uint32(8)
}

func (s DRKeyReq) SetTimestamp(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DRKeyReq) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s DRKeyReq) HasSignature() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyReq) SetSignature(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s DRKeyReq) CertVer() uint32 {
	return s.Struct.Uint32(12)
}

func (s DRKeyReq) SetCertVer(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DRKeyReq) TrcVer() uint32 {
	return s.Struct.Uint32(16)
}

func (s DRKeyReq) SetTrcVer(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DRKeyReq) Flags() DRKeyReq_flags { return DRKeyReq_flags(s) }

func (s DRKeyReq_flags) Prefetch() bool {
	return s.Struct.Bit(160)
}

func (s DRKeyReq_flags) SetPrefetch(v bool) {
	s.Struct.SetBit(160, v)
}

// DRKeyReq_List is a list of DRKeyReq.
type DRKeyReq_List struct{ capnp.List }

// NewDRKeyReq creates a new list of DRKeyReq.
func NewDRKeyReq_List(s *capnp.Segment, sz int32) (DRKeyReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return DRKeyReq_List{l}, err
}

func (s DRKeyReq_List) At(i int) DRKeyReq { return DRKeyReq{s.List.Struct(i)} }

func (s DRKeyReq_List) Set(i int, v DRKeyReq) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyReq_List) String() string {
	str, _ := text.MarshalList(0x9f50d21c9d4ce7ef, s.List)
	return str
}

// DRKeyReq_Promise is a wrapper for a DRKeyReq promised by a client call.
type DRKeyReq_Promise struct{ *capnp.Pipeline }

func (p DRKeyReq_Promise) Struct() (DRKeyReq, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyReq{s}, err
}

func (p DRKeyReq_Promise) Flags() DRKeyReq_flags_Promise { return DRKeyReq_flags_Promise{p.Pipeline} }

// DRKeyReq_flags_Promise is a wrapper for a DRKeyReq_flags promised by a client call.
type DRKeyReq_flags_Promise struct{ *capnp.Pipeline }

func (p DRKeyReq_flags_Promise) Struct() (DRKeyReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyReq_flags{s}, err
}

type DRKeyRep struct{ capnp.Struct }

// DRKeyRep_TypeID is the unique identifier for the type DRKeyRep.
const DRKeyRep_TypeID = 0xc3fe25dd82681d64

func NewDRKeyRep(s *capnp.Segment) (DRKeyRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return DRKeyRep{st}, err
}

func NewRootDRKeyRep(s *capnp.Segment) (DRKeyRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return DRKeyRep{st}, err
}

func ReadRootDRKeyRep(msg *capnp.Message) (DRKeyRep, error) {
	root, err := msg.RootPtr()
	return DRKeyRep{root.Struct()}, err
}

func (s DRKeyRep) String() string {
	str, _ := text.Marshal(0xc3fe25dd82681d64, s.Struct)
	return str
}

func (s DRKeyRep) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s DRKeyRep) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s DRKeyRep) Timestamp() uint32 {
	return s.Struct.Uint32(8)
}

func (s DRKeyRep) SetTimestamp(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DRKeyRep) ExpTime() uint32 {
	return s.Struct.Uint32(12)
}

func (s DRKeyRep) SetExpTime(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DRKeyRep) Cipher() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s DRKeyRep) HasCipher() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyRep) SetCipher(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s DRKeyRep) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s DRKeyRep) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DRKeyRep) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s DRKeyRep) CertVerSrc() uint32 {
	return s.Struct.Uint32(16)
}

func (s DRKeyRep) SetCertVerSrc(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DRKeyRep) CertVerDst() uint32 {
	return s.Struct.Uint32(20)
}

func (s DRKeyRep) SetCertVerDst(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DRKeyRep) TrcVer() uint32 {
	return s.Struct.Uint32(24)
}

func (s DRKeyRep) SetTrcVer(v uint32) {
	s.Struct.SetUint32(24, v)
}

// DRKeyRep_List is a list of DRKeyRep.
type DRKeyRep_List struct{ capnp.List }

// NewDRKeyRep creates a new list of DRKeyRep.
func NewDRKeyRep_List(s *capnp.Segment, sz int32) (DRKeyRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return DRKeyRep_List{l}, err
}

func (s DRKeyRep_List) At(i int) DRKeyRep { return DRKeyRep{s.List.Struct(i)} }

func (s DRKeyRep_List) Set(i int, v DRKeyRep) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyRep_List) String() string {
	str, _ := text.MarshalList(0xc3fe25dd82681d64, s.List)
	return str
}

// DRKeyRep_Promise is a wrapper for a DRKeyRep promised by a client call.
type DRKeyRep_Promise struct{ *capnp.Pipeline }

func (p DRKeyRep_Promise) Struct() (DRKeyRep, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyRep{s}, err
}

type DRKeyMgmt struct{ capnp.Struct }
type DRKeyMgmt_Which uint16

const (
	DRKeyMgmt_Which_unset    DRKeyMgmt_Which = 0
	DRKeyMgmt_Which_drkeyReq DRKeyMgmt_Which = 1
	DRKeyMgmt_Which_drkeyRep DRKeyMgmt_Which = 2
)

func (w DRKeyMgmt_Which) String() string {
	const s = "unsetdrkeyReqdrkeyRep"
	switch w {
	case DRKeyMgmt_Which_unset:
		return s[0:5]
	case DRKeyMgmt_Which_drkeyReq:
		return s[5:13]
	case DRKeyMgmt_Which_drkeyRep:
		return s[13:21]

	}
	return "DRKeyMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// DRKeyMgmt_TypeID is the unique identifier for the type DRKeyMgmt.
const DRKeyMgmt_TypeID = 0xb1bdb7d6fb13f1ca

func NewDRKeyMgmt(s *capnp.Segment) (DRKeyMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DRKeyMgmt{st}, err
}

func NewRootDRKeyMgmt(s *capnp.Segment) (DRKeyMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DRKeyMgmt{st}, err
}

func ReadRootDRKeyMgmt(msg *capnp.Message) (DRKeyMgmt, error) {
	root, err := msg.RootPtr()
	return DRKeyMgmt{root.Struct()}, err
}

func (s DRKeyMgmt) String() string {
	str, _ := text.Marshal(0xb1bdb7d6fb13f1ca, s.Struct)
	return str
}

func (s DRKeyMgmt) Which() DRKeyMgmt_Which {
	return DRKeyMgmt_Which(s.Struct.Uint16(0))
}
func (s DRKeyMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s DRKeyMgmt) DrkeyReq() (DRKeyReq, error) {
	p, err := s.Struct.Ptr(0)
	return DRKeyReq{Struct: p.Struct()}, err
}

func (s DRKeyMgmt) HasDrkeyReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyMgmt) SetDrkeyReq(v DRKeyReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyReq sets the drkeyReq field to a newly
// allocated DRKeyReq struct, preferring placement in s's segment.
func (s DRKeyMgmt) NewDrkeyReq() (DRKeyReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewDRKeyReq(s.Struct.Segment())
	if err != nil {
		return DRKeyReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DRKeyMgmt) DrkeyRep() (DRKeyRep, error) {
	p, err := s.Struct.Ptr(0)
	return DRKeyRep{Struct: p.Struct()}, err
}

func (s DRKeyMgmt) HasDrkeyRep() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyMgmt) SetDrkeyRep(v DRKeyRep) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyRep sets the drkeyRep field to a newly
// allocated DRKeyRep struct, preferring placement in s's segment.
func (s DRKeyMgmt) NewDrkeyRep() (DRKeyRep, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDRKeyRep(s.Struct.Segment())
	if err != nil {
		return DRKeyRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// DRKeyMgmt_List is a list of DRKeyMgmt.
type DRKeyMgmt_List struct{ capnp.List }

// NewDRKeyMgmt creates a new list of DRKeyMgmt.
func NewDRKeyMgmt_List(s *capnp.Segment, sz int32) (DRKeyMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return DRKeyMgmt_List{l}, err
}

func (s DRKeyMgmt_List) At(i int) DRKeyMgmt { return DRKeyMgmt{s.List.Struct(i)} }

func (s DRKeyMgmt_List) Set(i int, v DRKeyMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyMgmt_List) String() string {
	str, _ := text.MarshalList(0xb1bdb7d6fb13f1ca, s.List)
	return str
}

// DRKeyMgmt_Promise is a wrapper for a DRKeyMgmt promised by a client call.
type DRKeyMgmt_Promise struct{ *capnp.Pipeline }

func (p DRKeyMgmt_Promise) Struct() (DRKeyMgmt, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyMgmt{s}, err
}

func (p DRKeyMgmt_Promise) DrkeyReq() DRKeyReq_Promise {
	return DRKeyReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DRKeyMgmt_Promise) DrkeyRep() DRKeyRep_Promise {
	return DRKeyRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_f85d2602085656c1 = "x\xda\x84\x92AHT_\x14\xc6\xcfw\xce{3\x0a" +
	"\x0ex\x99\xf9\x83\xfc)t\x93\xd0\"I]%\x84\x12" +
	"\x0aY\x06\xde\xd1\x0c\xa2\x88a\xbc\x8eC\x8d<\xdf{" +
	"Bn\x12j\xd52\xa8E\x90\xe4\xa2\xc0EQBQ" +
	"\x8bZD\x0b!\xda4TH$\x14\x18\xb5H*(" +
	"\x10B_\\\x9f\x8eC(\xed\xde\xfb\xce\xb9\xe7~\xdf" +
	"\xfd\x9d\xfd\x97\xd0\xc5\xad\xee<\x13\xe9&7\x11}\xfb" +
	"\xdc7\xbd\xab\xdc\x7f\x93\xb4\x82D\xcf\x86\x86j\xb8\xf9" +
	"\xf4\x0a\xb9H\x12\xa5{QN\x1f\xb7_\xed\x1a'@" +
	"\x88^\xfcH\xff~\xfb\xe8\xe9\x9c\xed\xc6Vw\x0f\x92" +
	"B\x94\xbe\xcc\xef\xd2\xd7\xd8\x1e\xbc\xc2\xf7\x08\xd1\xf0\xee" +
	"\xd1\x8b\x8b{\xd6\x9e\xdbn\xa7j\xf6zK\xab\x94\xd3" +
	"\x07\xc5\xce> \xf3v\xf6\x93\xe6\xbd\xc1\x85\xe5\xd92" +
	"\xe9\xff![\xbe\xfeC\x12D\xed)\x97AH+\xb7" +
	"\x93\xf6E\xc3\xfeY3y\xa6T\xe0R\xd8\x92\xcfy" +
	"c^Gw\xf6\xa8\x99\xcc\x1a\x8c\xf7\x03\xbaA\x1c\"" +
	"\x07D\xeaz\x1b\x91\xbe*\xd03\x0c\x05\xce\xc0\x8a\xd3" +
	"Y\"}C\xa0g\x19Vc\"u\xdbj\xb7\x04\xfa" +
	">C\x89d D\xea\xee!\"=+\xd0\x0f\x18\xca" +
	"q2p\x88\xd4\\\x07\x91\xbe#\xd0\x8f\x19pQ\xe5" +
	"[=l#n,\x06\xc3\xb9\x00\xb5\xc4\xa8%Da" +
	"\xb1d\x820W\"x\xa8!F\x0d!\x0a\x8a\x85\xb1" +
	"\\8\xe1\x13\x0cR\xc4H\x11\xa6\xf2\xc6\x0f\x87\x8c\xbf" +
	"\xd9\xd3\x19\xfa\xf9\xaa\xdf\xc6\x91s\xb9B\xb0S\xecc" +
	"\x05)\x856w\x9d8uQ\xb4\x1e\xbc\xc7\x06\xef\x12" +
	"\xe8>F\x0akQ\x9c\xbc\xf7\x08\x91>,\xd0\x83\x8c" +
	"\x14\xafFqvm\xd5~\x81>\xc5h\x9c\x18\x0bL" +
	"H\x89\xf8\xae\xac\x19'\"\xd4o\xd1 \xa0\xde\x92\x8d" +
	"\xab^\\\xadp\xae\xaen\x8b\xc7\xb36\x9b*x^" +
	"Y\x97/\x05z\xa1\x0a\xcf\x1b\x8b\xe2\xb5@\x7f`(" +
	"\x96\xd8\xe3\xa2E\xb1 \xd0K\x0cl\xe0\xf9hI\xbc" +
	"\x17\xe8/\x16\x0fb<\x9f\xec\xe9%\x81\xfe\xceP\xae" +
	"\x93\x81K\xa4\x96O\x12\xe9\xaf\x02\xbd\xc2P\x097\x83" +
	"\x04\x91\xfae\xc5\x9f\x82,\x18*\x99\xc8\xd8=W\xab" +
	"v\xe6\x8a`\xc0\x01\xe3\xdf,\xa7\xccyo\xb0X2" +
	"\x15n\xf9\xa27j\xfcM\xac\xdb\xa1\x8e6P\x0f\x90" +
	"\xf8\xf9\xcaNl\x88\xdd$A\xb8\xc3\x12T\x9eU\xfe" +
	"~\xd6\xf1\x96\xf5\xfd \xed\x88S?\x13GNY\xa8" +
	"u\x02\xdd\xc0\x88<\xdf\x8c\x980?jq\x81\x18 " +
	"\xfc\x09\x00\x00\xff\xff\xb3\x91\xf5\x1f"

func init() {
	schemas.Register(schema_f85d2602085656c1,
		0x9f50d21c9d4ce7ef,
		0xb1bdb7d6fb13f1ca,
		0xc3fe25dd82681d64,
		0xd2a8ed7e732926bc)
}
